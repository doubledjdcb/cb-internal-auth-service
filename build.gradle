

buildscript {
    ext {
	springBootVersion = '1.3.1.RELEASE'
	appName = 'cb-internal-auth-service'
    }
    repositories {
      maven {
	url "https://plugins.gradle.org/m2/"
      }
    }
    //needed for the plugin for dependency-management (dependencyManagement function)
    dependencies {
      classpath "io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE"
      classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
  }
apply plugin: 'spring-boot'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: "io.spring.dependency-management"

dependencies {
    
    //compile("org.springframework.security:spring-security-web:4.1.0.RELEASE")
    //compile('org.springframework.security.oauth:spring-security-oauth2')
    //compile('org.springframework.security:spring-security-core')
    //compile('org.springframework.security:spring-security-jwt')
    //compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile('org.springframework.boot:spring-boot-starter-web'){
        exclude module: 'spring-boot-starter-tomcat'
    }
    
    //  Basically.. if you put this in here, everything gets blocked and the request never gets to the controllers for the jwt proof
   // compile('org.springframework.boot:spring-boot-starter-security')
    // Undertow will serve as the application's HTTP container
    compile('org.springframework.boot:spring-boot-starter-undertow')
    compile('io.jsonwebtoken:jjwt:0.6.0')
    
}
repositories {
    mavenCentral()
}
task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}
springBoot {
    executable = true
}